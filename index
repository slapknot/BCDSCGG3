<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SCG Deals</title>
  <style>
    /* --- General Styling --- */
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@400;500;700&display=swap');

    :root {
      --primary-color: #2E7D32;
      --secondary-color: #E8F5E9;
      --accent-color: #E53935;
      --text-color: #333;
      --light-text: #555;
      --card-radius: 8px;
      --shadow: rgba(0, 0, 0, 0.1);
      --header-height: 56px;
      --nav-height: 75px; /* Adjusted nav height */
    }

    * { box-sizing: border-box; margin: 0; padding: 0; }

    body {
      font-family: 'Noto Sans Thai', sans-serif;
      background: var(--secondary-color);
      color: var(--text-color);
    }

    a { text-decoration: none; color: inherit; }

    /* --- Header --- */
    header {
      position: sticky; top: 0;
      background: var(--primary-color); color: #fff;
      height: var(--header-height);
      display: flex; align-items: center; justify-content: center;
      font-size: 20px; font-weight: 500;
      box-shadow: 0 2px 4px var(--shadow); z-index: 300;
    }

    /* --- Main Navigation (Smaller) --- */
    .main-nav {
      position: sticky; top: var(--header-height);
      display: flex; justify-content: center; gap: 0.5rem; /* Reduced gap */
      background: #fff; padding: 8px; /* Reduced padding */
      box-shadow: 0 2px 4px var(--shadow); z-index: 200;
      height: var(--nav-height);
    }
    .nav-item {
      display: flex; flex-direction: column; align-items: center;
      justify-content: center;
      gap: 2px; padding: 4px 10px; /* Reduced padding & gap */
      border-radius: var(--card-radius);
      cursor: pointer; transition: background-color 0.2s;
      border: 2px solid transparent;
      color: var(--light-text);
    }
    .nav-item svg { width: 24px; height: 24px; fill: currentColor; } /* Smaller icon */
    .nav-item span { font-size: 12px; font-weight: 500; } /* Smaller text */
    .nav-item:hover { background-color: var(--secondary-color); }
    .nav-item.active {
      color: var(--primary-color);
      border-color: var(--primary-color);
      background-color: #e6f4e7;
    }

    /* --- Page Container --- */
    .page { display: none; }
    .page.active { display: block; }

    /* --- Filter Controls --- */
    .filter-controls {
      position: sticky; top: calc(var(--header-height) + var(--nav-height)); /* Adjusted for new nav height */
      background: #f8f9fa; padding: 8px;
      display: flex; gap: 6px; align-items: center;
      overflow-x: auto;
      border-bottom: 1px solid #dee2e6;
      z-index: 100; flex-wrap: wrap;
    }
    .filter-controls select,
    .filter-controls input[type="search"],
    .filter-controls button {
      flex: 0 0 auto; padding: 6px 12px;
      font-size: 14px; border: 1px solid #ccc;
      border-radius: 20px; background: #fff;
    }
    .filter-controls button {
      cursor: pointer; border: none;
      transition: background-color 0.2s;
      color: #fff;
    }
    .filter-controls button.random-btn { background: var(--accent-color); }
    .filter-controls button.random-btn:hover { background: #D32F2F; }
    .filter-controls button.reset-btn { background: #757575; }
    .filter-controls button.reset-btn:hover { background: #616161; }
    #selected-name {
      margin-left: 12px; font-size: 14px;
      font-weight: bold; color: var(--primary-color);
    }

    /* --- Content List & Cards --- */
    .content-list {
      display: grid; grid-template-columns: 1fr;
      gap: 12px; padding: 12px;
    }
    @media (min-width: 1024px) { .content-list { grid-template-columns: repeat(2, 1fr); } }

    .item-card {
      background: #fff; border-radius: var(--card-radius);
      overflow: hidden; box-shadow: 0 2px 8px var(--shadow);
      transition: transform .2s, box-shadow .2s;
      height: 100%; display: flex; flex-direction: column;
    }
    .item-card-link:hover .item-card {
      transform: translateY(-4px);
      box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    .card-image { position: relative; }
    .card-image img {
      width: 100%; height: 300px;
      object-fit: cover; display: block;
      background-color: #eee;
    }
    .badge-discount {
      position: absolute; top: 10px; left: 10px;
      background: var(--accent-color); color: #fff;
      padding: 6px 10px; font-size: 14px; font-weight: bold;
      border-radius: 16px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      animation: pulse 1.5s infinite;
    }
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    .item-info {
      padding: 12px; flex-grow: 1;
      display: flex; flex-direction: column;
    }
    .item-name {
      font-size: 16px; font-weight: 700;
      margin-bottom: 6px; line-height: 1.3;
    }
    .rating {
      display: inline-flex; align-items: center; gap: 4px;
      background: #FFB400; color: #fff;
      padding: 2px 8px; font-size: 12px; font-weight: 500;
      border-radius: 4px; margin-right: 6px;
    }
    .meta {
      font-size: 13px; color: var(--light-text);
      margin: 4px 0; display: block;
    }
    .location::before { content: 'üìç'; margin-right: 4px; }
    .green-score-container, .amenities-container { margin-top: auto; padding-top: 8px; }
    .green-score-label {
      font-size: 12px; color: var(--light-text); margin-bottom: 4px;
    }
    .green-score-bar {
      width: 100%; background: #ddd; border-radius: 4px;
      overflow: hidden; height: 8px;
    }
    .green-score-fill {
      height: 100%; background: var(--primary-color);
      transition: width 0.5s ease-in-out;
    }
    .amenities-list { display: flex; flex-wrap: wrap; gap: 6px; margin-top: 4px; }
    .amenity-tag {
      background: var(--secondary-color); color: var(--primary-color);
      font-size: 11px; padding: 3px 8px; border-radius: 12px;
    }
    .highlight {
      box-shadow: 0 0 16px var(--primary-color);
      border: 2px solid var(--primary-color);
    }
    .message-box {
        text-align: center; padding: 40px 20px;
        color: var(--light-text); font-size: 16px;
        grid-column: 1 / -1;
    }
  </style>
</head>
<body>
  <header>SCG Deals</header>

  <nav class="main-nav">
    <a href="#restaurants" class="nav-item active" data-page="restaurants">
      <svg viewBox="0 0 24 24"><path d="M11,9H9V2H7V9H5V2H3V9C3,11.12 4.66,12.84 6.75,12.97V22H9.25V13C10.19,12.89 11,12.05 11,11.1V9M16,2V22H18V2H16Z"></path></svg>
      <span>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
    </a>
    <a href="#hotels" class="nav-item" data-page="hotels">
      <svg viewBox="0 0 24 24"><path d="M19,7H11V14H3V5H1V20H3V17H21V20H23V11A4,4 0 0,0 19,7M7,13A3,3 0 0,0 10,10A3,3 0 0,0 7,7A3,3 0 0,0 4,10A3,3 0 0,0 7,13Z"></path></svg>
      <span>‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°</span>
    </a>
    <a href="#golf" class="nav-item" data-page="golf">
      <svg viewBox="0 0 24 24"><path d="M12.4,12.4L11,11L10,12L12.4,14.4M13,10H11V4L5,6.5V17H2V20H22V10H13M7,15V8.1L9,7.2V15H7Z"></path></svg>
      <span>‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü</span>
    </a>
  </nav>

  <!-- Restaurants Page -->
  <div id="page-restaurants" class="page active">
    <div class="filter-controls">
      <input type="search" id="search-input-restaurant" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô...">
      <select id="filter-province-restaurant"><option value="">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option></select>
      <select id="filter-district-restaurant" disabled><option value="">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</option></select>
      <select id="filter-type-restaurant"><option value="">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£</option><option value="buffet">‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå</option><option value="asian">‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢</option><option value="western">‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å</option></select>
      <select id="filter-price-restaurant"><option value="">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ø)</option><option value="0-200">0 ‚Äì 200</option><option value="201-500">201 ‚Äì 500</option><option value="501-1000">501 ‚Äì 1000</option><option value="1001-">1001+</option></select>
      <select id="sort-order-restaurant"><option value="">‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á</option><option value="price_desc">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥</option><option value="rating_desc">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥</option></select>
      <button id="random-btn-restaurant" class="random-btn">‡∏™‡∏∏‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô</button>
      <button id="reset-btn-restaurant" class="reset-btn">‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤</button>
      <span id="selected-name-restaurant"></span>
    </div>
    <div id="restaurants-list" class="content-list">
      <div class="message-box">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
    </div>
  </div>

  <!-- Hotels Page -->
  <div id="page-hotels" class="page">
    <div class="filter-controls">
      <input type="search" id="search-input-hotel" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°...">
      <select id="filter-province-hotel"><option value="">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option></select>
      <select id="filter-price-hotel"><option value="">‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Ñ‡∏∑‡∏ô (‡∏ø)</option><option value="0-3000">0 - 3000</option><option value="3001-5000">3001 - 5000</option><option value="5001-">5001+</option></select>
      <select id="filter-rating-hotel"><option value="">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏≤‡∏ß</option><option value="3">3 ‚òÖ</option><option value="4">4 ‚òÖ</option><option value="5">5 ‚òÖ</option></select>
      <button id="reset-btn-hotel" class="reset-btn">‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤</button>
    </div>
    <div id="hotels-list" class="content-list">
      <div class="message-box">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°</div>
    </div>
  </div>

  <!-- Golf Page -->
  <div id="page-golf" class="page">
    <div class="filter-controls">
      <input type="search" id="search-input-golf" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü...">
      <select id="filter-province-golf"><option value="">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option></select>
      <select id="filter-price-golf"><option value="">Green Fee (‡∏ø)</option><option value="0-2500">0 - 2500</option><option value="2501-4000">2501 - 4000</option><option value="4001-">4001+</option></select>
      <select id="filter-holes-golf"><option value="">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏∏‡∏°</option><option value="9">9 ‡∏´‡∏•‡∏∏‡∏°</option><option value="18">18 ‡∏´‡∏•‡∏∏‡∏°</option></select>
      <button id="reset-btn-golf" class="reset-btn">‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤</button>
    </div>
    <div id="golf-list" class="content-list">
       <div class="message-box">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü</div>
    </div>
  </div>

<script>
document.addEventListener('DOMContentLoaded', () => {

  // --- DATA ---
  const restaurantData = [
    {name:'‡∏£‡πâ‡∏≤‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÅ‡∏Å‡∏ô‡∏¥‡∏Å',discount:10,greenScore:92,rating:4.7,province:'‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ',district:'‡∏®‡∏£‡∏µ‡∏£‡∏≤‡∏ä‡∏≤',type:'buffet',price:450},
    {name:'‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÅ‡∏°‡πà‡∏ö‡∏∏‡∏ç‡∏ä‡πà‡∏ß‡∏¢',discount:15,greenScore:75,rating:4.3,province:'‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',district:'‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',type:'asian',price:129},
    {name:'SteakHouse Prime',discount:20,greenScore:60,rating:4.8,province:'‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',district:'‡∏ß‡∏±‡∏í‡∏ô‡∏≤',type:'western',price:1299},
    {name:'‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠',discount:5,greenScore:55,rating:4.2,province:'‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',district:'‡∏õ‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á',type:'asian',price:89},
    {name:'La Pizzeria Italiano',discount:25,greenScore:80,rating:4.6,province:'‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',district:'‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',type:'western',price:550},
    {name:'Buffet ‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà',discount:30,greenScore:95,rating:4.9,province:'‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï',district:'‡∏£‡∏≤‡πÑ‡∏ß‡∏¢‡πå',type:'buffet',price:799},
    {name:'‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏õ‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏ï‡πâ',discount:12,greenScore:65,rating:4.1,province:'‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä',district:'‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå',type:'asian',price:159},
    {name:'Sushi Master',discount:18,greenScore:85,rating:4.5,province:'‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',district:'‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å',type:'asian',price:899},
    {name:'Curry & Rice',discount:22,greenScore:70,rating:4.4,province:'‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ',district:'‡∏≠‡∏π‡πà‡∏ó‡∏≠‡∏á',type:'asian',price:199},
    {name:'Burger Town',discount:8,greenScore:50,rating:4.0,province:'‡∏ä‡∏∏‡∏°‡∏û‡∏£',district:'‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏û‡∏£',type:'western',price:299}
  ];
  const hotelData = [
    {name: 'SCG Grand Hotel', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø', price: 5500, rating: 5, amenities: ['‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥', '‡∏™‡∏õ‡∏≤', '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'], discount: 15},
    {name: 'Chiang Mai Mountain Retreat', province: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', price: 3800, rating: 4, amenities: ['‡∏ß‡∏¥‡∏ß‡∏†‡∏π‡πÄ‡∏Ç‡∏≤', '‡∏£‡∏ß‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤'], discount: 20},
    {name: 'Phuket Beachside Resort', province: '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', price: 4500, rating: 4, amenities: ['‡∏ï‡∏¥‡∏î‡∏ä‡∏≤‡∏¢‡∏´‡∏≤‡∏î', '‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏≤‡∏á‡∏ô‡πâ‡∏≥'], discount: 10}
  ];
  const golfData = [
    {name: 'Siam Country Club', province: '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', price: 3500, holes: 18, features: ['‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏õ‡∏£', '‡∏Ñ‡∏•‡∏±‡∏ö‡πÄ‡∏Æ‡∏≤‡∏™‡πå'], discount: 10},
    {name: 'Alpine Golf Club', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø', price: 4800, holes: 18, features: ['‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ä‡∏°‡πÄ‡∏õ‡∏µ‡πâ‡∏¢‡∏ô‡∏ä‡∏¥‡∏û', '‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢'], discount: 15},
    {name: 'Blue Canyon Country Club', province: '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', price: 5200, holes: 18, features: ['‡πÄ‡∏Ñ‡∏¢‡∏à‡∏±‡∏î‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ô‡∏≤‡πÄ‡∏°‡∏ô‡∏ï‡πå', '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤'], discount: 5}
  ];

  // --- PAGE NAVIGATION ---
  const navItems = document.querySelectorAll('.nav-item');
  const pages = document.querySelectorAll('.page');
  
  function navigateToPage(pageId) {
      navItems.forEach(nav => nav.classList.toggle('active', nav.dataset.page === pageId));
      pages.forEach(page => page.classList.toggle('active', page.id === `page-${pageId}`));
      window.location.hash = pageId;
  }

  navItems.forEach(item => {
    item.addEventListener('click', (e) => {
      e.preventDefault();
      navigateToPage(item.dataset.page);
    });
  });

  // Handle initial page load from hash
  const initialPage = window.location.hash.replace('#', '') || 'restaurants';
  navigateToPage(initialPage);


  // --- SHARED FUNCTIONS ---
  function populateFilter(selectElement, data, key) {
    const uniqueValues = [...new Set(data.map(item => item[key]))].sort();
    uniqueValues.forEach(val => {
      let opt = document.createElement('option');
      opt.value = val;
      opt.text = val;
      selectElement.add(opt);
    });
  }

  function createItemCard(item) {
    const link = document.createElement('a');
    link.href = `#${item.type || 'item'}/${item.name.toLowerCase().replace(/\s/g, '-')}`;
    link.className = 'item-card-link';
    link.onclick = (e) => e.preventDefault();

    const card = document.createElement('div');
    card.className = 'item-card';
    // Use a placeholder service for images. Replace with real image generation API if available.
    const imageText = `${item.name}`;
    const imageSrc = `https://placehold.co/600x400/e0e0e0/333?text=${encodeURIComponent(imageText)}&font=noto-sans-thai`;

    let detailsHtml = '';
    let type = 'item';

    if ('greenScore' in item) { // It's a restaurant
      type = 'restaurant';
      detailsHtml = `
        <div><span class="rating">${item.rating} ‚òÖ</span><span class="meta"> ‡∏ø${item.price}</span></div>
        <div class="meta">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${item.type}</div>
        <div class="meta location">${item.district}, ${item.province}</div>
        <div class="green-score-container">
          <div class="green-score-label">Green Score: ${item.greenScore}</div>
          <div class="green-score-bar"><div class="green-score-fill" style="width: ${item.greenScore}%;"></div></div>
        </div>
      `;
    } else if ('amenities' in item) { // It's a hotel
      type = 'hotel';
      detailsHtml = `
        <div>
          <span class="rating">${'‚òÖ'.repeat(item.rating)}</span>
          <span class="meta"> ‡∏ø${item.price}/‡∏Ñ‡∏∑‡∏ô</span>
        </div>
        <div class="meta location">${item.province}</div>
        <div class="amenities-container">
          <div class="amenities-list">${item.amenities.map(a => `<span class="amenity-tag">${a}</span>`).join('')}</div>
        </div>
      `;
    } else if ('holes' in item) { // It's a golf course
      type = 'golf';
      detailsHtml = `
        <div><span class="meta">Green Fee: ‡∏ø${item.price}</span></div>
        <div class="meta location">${item.province}</div>
        <div class="meta">${item.holes} ‡∏´‡∏•‡∏∏‡∏°</div>
        <div class="amenities-container">
          <div class="amenities-list">${item.features.map(f => `<span class="amenity-tag">${f}</span>`).join('')}</div>
        </div>
      `;
    }

    card.innerHTML = `
      <div class="card-image">
        <img src="${imageSrc}" alt="${item.name}">
        ${item.discount ? `<div class="badge-discount">-${item.discount}%</div>` : ''}
      </div>
      <div class="item-info">
        <div><div class="item-name">${item.name}</div></div>
        ${detailsHtml}
      </div>
    `;
    link.appendChild(card);
    return link;
  }

  // --- RESTAURANT LOGIC ---
  (function initRestaurants() {
    const listEl = document.getElementById('restaurants-list');
    const searchInput = document.getElementById('search-input-restaurant');
    const provinceFilter = document.getElementById('filter-province-restaurant');
    const districtFilter = document.getElementById('filter-district-restaurant');
    const typeFilter = document.getElementById('filter-type-restaurant');
    const priceFilter = document.getElementById('filter-price-restaurant');
    const sortOrder = document.getElementById('sort-order-restaurant');
    const randomBtn = document.getElementById('random-btn-restaurant');
    const resetBtn = document.getElementById('reset-btn-restaurant');
    const selectedNameEl = document.getElementById('selected-name-restaurant');
    let randomInterval = null;

    populateFilter(provinceFilter, restaurantData, 'province');

    function applyFilters() {
      if (randomInterval) clearInterval(randomInterval);
      selectedNameEl.textContent = '';

      const term = searchInput.value.trim().toLowerCase();
      let data = restaurantData.filter(r => {
        if (term && !r.name.toLowerCase().includes(term)) return false;
        if (provinceFilter.value && r.province !== provinceFilter.value) return false;
        if (districtFilter.value && r.district !== districtFilter.value) return false;
        if (typeFilter.value && r.type !== typeFilter.value) return false;
        if (priceFilter.value) {
          const [min, max] = priceFilter.value.split('-');
          if (min && r.price < +min) return false;
          if (max && max !== '' && r.price > +max) return false;
        }
        return true;
      });

      if (sortOrder.value) {
        const [key, dir] = sortOrder.value.split('_');
        data.sort((a,b) => dir === 'desc' ? b[key] - a[key] : a[key] - b[key]);
      }
      render(data);
    }
    
    function render(data) {
      listEl.innerHTML = '';
      if (data.length === 0) {
        listEl.innerHTML = '<div class="message-box">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</div>';
        return;
      }
      data.forEach(r => listEl.appendChild(createItemCard(r)));
    }
    
    function updateDistricts() {
        const prov = provinceFilter.value;
        districtFilter.innerHTML = '<option value="">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</option>';
        districtFilter.disabled = !prov;
        if (prov) {
            const districts = [...new Set(restaurantData.filter(r => r.province === prov).map(r => r.district))].sort();
            districts.forEach(d => {
                let opt = document.createElement('option');
                opt.value = opt.text = d;
                districtFilter.add(opt);
            });
        }
        applyFilters();
    }

    function handleRandomClick() {
        if (randomInterval) clearInterval(randomInterval);
        const cards = Array.from(listEl.querySelectorAll('.item-card'));
        if (!cards.length) return;

        selectedNameEl.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°...';
        cards.forEach(c => c.classList.remove('highlight'));

        let idx = 0;
        const totalSpins = cards.length * 2 + Math.floor(Math.random() * cards.length);
        let counter = 0;

        randomInterval = setInterval(() => {
            cards.forEach(c => c.classList.remove('highlight'));
            if (cards[idx]) {
                cards[idx].classList.add('highlight');
            }
            idx = (idx + 1) % cards.length;
            if (counter++ > totalSpins) {
                clearInterval(randomInterval);
                randomInterval = null;
                const finalIndex = idx > 0 ? idx - 1 : cards.length - 1;
                cards.forEach(c => c.classList.remove('highlight'));
                const selectedCard = cards[finalIndex];
                if (selectedCard) {
                    selectedCard.classList.add('highlight');
                    selectedCard.parentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    selectedNameEl.textContent = `‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${selectedCard.querySelector('.item-name').textContent}`;
                }
            }
        }, 100);
    }

    function reset() {
      searchInput.value = '';
      provinceFilter.value = '';
      typeFilter.value = '';
      priceFilter.value = '';
      sortOrder.value = '';
      updateDistricts();
    }

    [searchInput, districtFilter, typeFilter, priceFilter, sortOrder].forEach(el => el.addEventListener('input', applyFilters));
    provinceFilter.addEventListener('change', updateDistricts);
    randomBtn.addEventListener('click', handleRandomClick);
    resetBtn.addEventListener('click', reset);
    
    applyFilters();
  })();

  // --- HOTEL LOGIC ---
  (function initHotels() {
    const listEl = document.getElementById('hotels-list');
    const searchInput = document.getElementById('search-input-hotel');
    const provinceFilter = document.getElementById('filter-province-hotel');
    const priceFilter = document.getElementById('filter-price-hotel');
    const ratingFilter = document.getElementById('filter-rating-hotel');
    const resetBtn = document.getElementById('reset-btn-hotel');

    populateFilter(provinceFilter, hotelData, 'province');

    function applyFilters() {
      const term = searchInput.value.trim().toLowerCase();
      let data = hotelData.filter(h => {
        if (term && !h.name.toLowerCase().includes(term)) return false;
        if (provinceFilter.value && h.province !== provinceFilter.value) return false;
        if (ratingFilter.value && h.rating != ratingFilter.value) return false;
        if (priceFilter.value) {
          const [min, max] = priceFilter.value.split('-');
          if (min && h.price < +min) return false;
          if (max && max !== '' && h.price > +max) return false;
        }
        return true;
      });
      render(data);
    }

    function render(data) {
      listEl.innerHTML = '';
      if (data.length === 0) {
        listEl.innerHTML = '<div class="message-box">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</div>';
        return;
      }
      data.forEach(h => listEl.appendChild(createItemCard(h)));
    }

    function reset() {
      searchInput.value = '';
      provinceFilter.value = '';
      priceFilter.value = '';
      ratingFilter.value = '';
      applyFilters();
    }

    [searchInput, provinceFilter, priceFilter, ratingFilter].forEach(el => el.addEventListener('input', applyFilters));
    resetBtn.addEventListener('click', reset);
    applyFilters();
  })();

  // --- GOLF LOGIC ---
  (function initGolf() {
    const listEl = document.getElementById('golf-list');
    const searchInput = document.getElementById('search-input-golf');
    const provinceFilter = document.getElementById('filter-province-golf');
    const priceFilter = document.getElementById('filter-price-golf');
    const holesFilter = document.getElementById('filter-holes-golf');
    const resetBtn = document.getElementById('reset-btn-golf');

    populateFilter(provinceFilter, golfData, 'province');

    function applyFilters() {
      const term = searchInput.value.trim().toLowerCase();
      let data = golfData.filter(g => {
        if (term && !g.name.toLowerCase().includes(term)) return false;
        if (provinceFilter.value && g.province !== provinceFilter.value) return false;
        if (holesFilter.value && g.holes != holesFilter.value) return false;
        if (priceFilter.value) {
          const [min, max] = priceFilter.value.split('-');
          if (min && g.price < +min) return false;
          if (max && max !== '' && g.price > +max) return false;
        }
        return true;
      });
      render(data);
    }

    function render(data) {
      listEl.innerHTML = '';
      if (data.length === 0) {
        listEl.innerHTML = '<div class="message-box">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</div>';
        return;
      }
      data.forEach(g => listEl.appendChild(createItemCard(g)));
    }

    function reset() {
      searchInput.value = '';
      provinceFilter.value = '';
      priceFilter.value = '';
      holesFilter.value = '';
      applyFilters();
    }

    [searchInput, provinceFilter, priceFilter, holesFilter].forEach(el => el.addEventListener('input', applyFilters));
    resetBtn.addEventListener('click', reset);
    applyFilters();
  })();

});
</script>
</body>
</html>
